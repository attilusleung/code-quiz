timeout = 2000
template = "test.html"
max_proc = 5
java_test_file = "template.java"

[identity]
handle = "identity"
function_name = "identity"
prompt = "Implement a function `identity` that takes in an integer and returns it's input."

    [identity.python]
    boilerplate = "def identity(x):\n    pass"
    test_case = "[([1], 1), ([2], 2), ([3], 3), ([-400], -400)]"

    [identity.java]
    boilerplate = "public class Solution {\n    public int identity(int x) { \n\n    }\n}"
    test_case = "TestCase<int[], Integer> testCase[] = new TestCase[] {new TestCase(new int[]{1}, 1), new TestCase(new int[]{2}, 2), new TestCase(new int[]{3}, 3), new TestCase(new int[]{-400}, -400)}"
    func_call = "identity(t.input[0])"



[both_odd]
handle = "both_odd"
function_name = "is_both_odd"
prompt = "Implement a function `is_both_odd` that returns whether it's input is odd."

    [both_odd.python]
    test_case = "[([1, 1], True), ([2, 3], False), ([0, 3], False), ([-1, -3], True)]"
    boilerplate = "def is_odd(x):\n    pass"

    [both_odd.java]
    boilerplate = "public class Solution {\n    public int isBothOdd(int x, int y) { \n\n    }\n}"
    test_case = "TestCase<int[], Boolean> testCase[] = new TestCase[] {new TestCase(new int[]{1, 1}, true), new TestCase(new int[]{2, 3}, false), new TestCase(new int[]{0, 3}, false), new TestCase(new int[]{-1, -3}, true)}"
    func_call = "isBothOdd(t.input[0], t.input[1])"
